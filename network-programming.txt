TCP Headers and UDP Headers Explained
http://compnetworking.about.com/od/networkprotocolsip/fl/TCP-Headers-and-UDP-Headers-Explained.htm
https://www.cs.nmt.edu/~risk/TCP-UDP%20Pocket%20Guide.pdf

TCP Connection Establishment and Termination
http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch02lev1sec6.html

TCP connection backlog
http://tangentsoft.net/wskfaq/advanced.html#backlog
http://alas.matf.bg.ac.rs/manuals/lspe/snode=68.html
http://stackoverflow.com/questions/29874763/does-listen-backlog-affect-established-tcp-connections

Network congestion
http://linuxgazette.net/144/menon.html
http://euclid.nmu.edu/~rappleto/Classes/CS228/Notes/IP-Protocols/tcp.html
http://www.brendangregg.com/blog/2014-09-06/linux-ftrace-tcp-retransmit-tracing.html
http://serverfault.com/questions/318909/how-passively-monitor-for-tcp-packet-loss-linux

Non-blocking
http://beej.us/guide/bgnet/output/html/multipage/advanced.html
http://www.wangafu.net/~nickm/libevent-book/01_intro.html

UDP
https://www.abc.se/~m6695/udp.html
https://www.cs.cmu.edu/afs/cs/academic/class/15213-f99/www/class26/

Multicast
http://tldp.org/HOWTO/Multicast-HOWTO-1.html
http://ntrg.cs.tcd.ie/undergrad/4ba2/multicast/antony/example.html
http://www.tack.ch/multicast/
http://www.thegeekstuff.com/2013/05/ip-multicasting/
http://slideplayer.com/slide/2874353/

What is IGMP Querying and IGMP Snooping and why would I need it on my network?
- IGMP is between host and router so that rourter can receive specific multicast
  traffic.
- IGMP snooping is more about swith thing so switch won't flood the multicast
  traffic to all ports.
http://www.vsicam.com/_faq/what-is-igmp-querying-and-igmp-snooping-and-why-would-i-need-it-on-my-network/

Traditional name for different layers -
TCP: segment
IP:  datagram, fragmentation
Link:frame

MTU vs. MSS vs. Window size
MTU: max transimitted unit (payload of link layer (frame))
MSS: max segment size (for tcp)
Window size: telling how many bytes the receiver is willing/able to receive for
             next segment, theoretically [2, 60k]

a frame's total size is 1526 bytes, so -
1526 = (8+6+6+2+4) + (20 + 20 + 1460)
       ----------    ---------------
           26         MTU, 1500, payload for datagram coming from ip (ethernet)
                      IP   TCP  TCP(MSS)

While TCP contains mechanisms for avoiding IP fragmentation, UDP does not. With
UDP, we can easily cause IP fragmentation by transimitting a datagram that 
exceeds the MTU of the local data link.
UDP based app typically adopt a conservative approach that is to ensure the
transimitted IP datagram less than IPv4 min reassembly buffer size of 576 bytes
576 = 20 + 8  +  548
      --   --    ---
      IP   UDP   UDP datagram
In practice, many UDP based app opt for a still lower limit of 512 bytes for
datagrams.

Nagle's algorithm: reduce the number of packets sent over the network by
                   combining small outgoing msgs into one
                   TCP_NODELAY is used to diable Nagle's algorithm
TCP delayed ack: several ack resp may be combined into a single response. Host
                 may delay sending ack by up to 500ms
                 TCP_QUICKACK is used to disable delayed ack
                

TCP states
LISTEN:     wait for a connection
SYN_SENT:   has sent a SYN and is waiting for reply
SYN_RECV:   the TCP formerly in LISTEN state has received SYN and has responded
            with SYN/ACK, and is now waiting for ACK to complete connection
ESTABLISHED:

(active close side)
|FIN_WAIT1: TCP has sent a FIN to the peer and is waiting for ACK
|FIN_WAIT2: TCP formerly in the FIN_WAIT1 state has now received ACK
|CLOSING:   TCP formerly awaiting ACK in the FIN_WAIT1 state, instead received
|           FIN from its peer meaning the peer simultaneously tried to perform
|           an active close. THIS is a rare scenario.
|TIME_WAIT: having done an active close, the TCP received FIN, indicating the
|           peer has performed a passive close. Then this TCP spends a fixed
|           amount of time in the TIME_WAIT state, in order to ensure reliable
|           termination of connection and to ensure any old duplicate segments
|           expire in the nextwork before a new incarnation of the same
|           connection is created.

(passive close side)
|CLOSE_WAIT:has received FIN from peer
|LAST_ACK:  formerly in CLOSE_WAIT state, sent FIN and is waiting ACK. When the
|           ACK is received, the connection is closed and kernel resources are
|           freed.


C and Linux Socket topics
http://www.tenouk.com/cnlinuxsockettutorials.html

Socket programming and the C BSD API
http://www.yolinux.com/TUTORIALS/Sockets.html

http://inst.eecs.berkeley.edu/~ee122/fa09/notes/

C10k - handle thousands of connections simultaneously
http://www.kegel.com/c10k.html
http://highscalability.com/blog/2013/5/13/the-secret-to-10-million-concurrent-connections-the-kernel-i.html
http://stackoverflow.com/questions/2831434/how-to-retain-one-million-simultaneous-tcp-connections

select, poll, and epoll
http://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/
http://amsekharkernel.blogspot.com/2013/05/what-is-epoll-epoll-vs-select-call-and.html
https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/

IPC socket/UNIX domain socket
https://lists.freebsd.org/pipermail/freebsd-performance/2005-February/001143.html
http://www.tldp.org/LDP/tlk/ipc/ipc.html
http://beej.us/guide/bgipc/output/html/singlepage/bgipc.html

SSL/TLS
http://simplestcodings.blogspot.com.br/2010/08/secure-server-client-using-openssl-in-c.html
https://www.codeproject.com/Articles/1000189/A-Working-TCP-Client-and-Server-With-SSL
https://www.codeproject.com/Articles/98355/SMTP-Client-with-SSL-TLS
http://stackoverflow.com/questions/7698488/turn-a-simple-socket-into-an-ssl-socket
https://www.cs.utah.edu/~swalton/listings/articles/
https://wiki.openssl.org/index.php/SSL/TLS_Client

Modem vs. Router vs. Switch vs. Hub
http://whirlpool.net.au/wiki/dsl_modems03_01
https://computer.howstuffworks.com/router.htm/printable
https://computer.howstuffworks.com/lan-switch.htm/printable
http://www.diffen.com/difference/Router_vs_Switch
https://www.ccontrols.com/pdf/Essentials0411.pdf
